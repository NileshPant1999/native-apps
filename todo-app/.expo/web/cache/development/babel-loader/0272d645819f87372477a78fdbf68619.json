{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/nilesh/Desktop/native-apps/nilesh-todo/components/TodoList.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport colors from \"../Colors\";\nimport TodoModal from \"./TodoModal\";\n\nvar TodoList = function (_React$Component) {\n  _inherits(TodoList, _React$Component);\n\n  var _super = _createSuper(TodoList);\n\n  function TodoList() {\n    var _this;\n\n    _classCallCheck(this, TodoList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      showListVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(TodoList, [{\n    key: \"toggleListModel\",\n    value: function toggleListModel() {\n      this.setState({\n        showListVisible: !this.state.showListVisible\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var list = this.props.list;\n      var completedCount = list.todos.filter(function (todo) {\n        return todo.completed;\n      }).length;\n      var remainingCount = list.todos.length - completedCount;\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }\n      }, React.createElement(Modal, {\n        animationType: \"slide\",\n        visible: this.state.showListVisible,\n        onRequestClose: function onRequestClose() {\n          return _this2.toggleListModel();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }\n      }, React.createElement(TodoModal, {\n        list: list,\n        closeModal: function closeModal() {\n          return _this2.toggleListModel();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }\n      })), React.createElement(TouchableOpacity, {\n        style: [styles.listContainer, {\n          backgroundColor: list.color\n        }],\n        onPress: function onPress() {\n          return _this2.toggleListModel();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.listTitle,\n        numberOfLines: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }\n      }, list.name), React.createElement(View, {\n        style: {\n          alignItems: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.count,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }\n      }, completedCount), React.createElement(Text, {\n        style: styles.subtitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }\n      }, \"Completed\")), React.createElement(View, {\n        style: {\n          alignItems: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.count,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }\n      }, remainingCount), React.createElement(Text, {\n        style: styles.subtitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }\n      }, \"Remaining\"))));\n    }\n  }]);\n\n  return TodoList;\n}(React.Component);\n\nexport { TodoList as default };\nvar styles = StyleSheet.create({\n  listContainer: {\n    paddingVertical: 32,\n    paddingHorizontal: 16,\n    borderRadius: 6,\n    marginHorizontal: 12,\n    alignItems: 'center',\n    width: 200\n  },\n  listTitle: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: colors.white,\n    marginBottom: 18\n  },\n  count: {\n    fontSize: 48,\n    fontWeight: '100',\n    color: colors.white\n  },\n  subtitle: {\n    fontSize: 12,\n    fontWeight: \"500\",\n    color: colors.white\n  }\n});","map":{"version":3,"sources":["/home/nilesh/Desktop/native-apps/nilesh-todo/components/TodoList.js"],"names":["React","colors","TodoModal","TodoList","state","showListVisible","setState","list","props","completedCount","todos","filter","todo","completed","length","remainingCount","toggleListModel","styles","listContainer","backgroundColor","color","listTitle","name","alignItems","count","subtitle","Component","StyleSheet","create","paddingVertical","paddingHorizontal","borderRadius","marginHorizontal","width","fontSize","fontWeight","white","marginBottom"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { StyleSheet, Text, TouchableOpacity, View, FlatList, Modal } from 'react-native';\nimport colors from '../Colors';\nimport TodoModal from './TodoModal'\n\nexport default class TodoList extends React.Component {\n\n    state = {\n        showListVisible: false\n    }\n\n    toggleListModel() {\n        this.setState({ showListVisible: !this.state.showListVisible })\n    }\n\n    render() {\n        const list = this.props.list\n\n        const completedCount = list.todos.filter(todo => todo.completed).length;\n        const remainingCount = list.todos.length - completedCount;\n\n        return (\n            <View>\n\n                <Modal\n                    animationType='slide'\n                    visible={this.state.showListVisible}\n                    onRequestClose={() => this.toggleListModel()}\n                >\n                    <TodoModal list={list} closeModal={() => this.toggleListModel()} />\n                </Modal>\n\n                <TouchableOpacity\n                    style={[styles.listContainer,\n                    { backgroundColor: list.color }]}\n                    onPress={() => this.toggleListModel()}\n                >\n\n                    <Text style={styles.listTitle} numberOfLines={1}>\n                        {list.name}\n                    </Text>\n                    <View style={{ alignItems: 'center' }}>\n                        <Text style={styles.count}>{completedCount}</Text>\n                        <Text style={styles.subtitle}>Completed</Text>\n                    </View>\n                    <View style={{ alignItems: 'center' }}>\n                        <Text style={styles.count}>{remainingCount}</Text>\n                        <Text style={styles.subtitle}>Remaining</Text>\n                    </View>\n                </TouchableOpacity>\n            </View>\n\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    listContainer: {\n        paddingVertical: 32,\n        paddingHorizontal: 16,\n        borderRadius: 6,\n        marginHorizontal: 12,\n        alignItems: 'center',\n        width: 200\n    },\n    listTitle: {\n        fontSize: 24,\n        fontWeight: '700',\n        color: colors.white,\n        marginBottom: 18\n    },\n    count: {\n        fontSize: 48,\n        fontWeight: '100',\n        color: colors.white\n    },\n    subtitle: {\n        fontSize: 12,\n        fontWeight: \"500\",\n        color: colors.white\n\n    }\n})"]},"metadata":{},"sourceType":"module"}